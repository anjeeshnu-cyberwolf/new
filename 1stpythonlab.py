# -*- coding: utf-8 -*-
"""1stpythonlab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174s1dQ-pksx-No4dueFi3SMhGT0YHVai
"""

#1(Integer):
dt_a=10
dt_a
print(dt_a)
type(dt_a)

#2(Float):
a=12
b=2.5
c=a+b
print(c)
type(c)

#3(String):
a='Happy birthday'
print(a)
print(a.upper())
print(a.lower())
a.replace('birth','death')

#4(Typecasting): 
tc_mark1=44
tc_mark2=76
tc_mark3=99
tc_mark4=83
tc_mark5=91
tc_average=(tc_mark1+tc_mark2+tc_mark3+tc_mark4+tc_mark5)/5
print("the average value is",tc_average)
int(tc_average)

#5 Data structures (List): 
name=['thulasi','doss','karthi','maha','yuvaraj']
gender=['m','m','m','f','m']
age=[21,20,22,22,21]
register_no=[101,102,103,104,105]
nationality=['true','true','false','true','true']
list=[name,gender,age,register_no,nationality]
print(list)
print(len(name))
age.append(23)
print(age)
gender.extend(['m','f'])
print(gender)
del(register_no[2])
print(register_no)
detail=name+gender+age
print(detail)
a ='m'
if a in gender:
  print("exist")
else:
  print("not exist")

#6 Data structures (Tuples):
my_data=(15002,'THULASI','DOSS',8.5,8.5)
print(my_data)
print(my_data[0])
print(my_data[0:2])
x=my_data.count(8.5)
print(x)
y=my_data.index('THULASI')
print(y)

#7 Data structures (Dictionary):
wa_corpa={'hlo':'hello','gud':'good','ni8':'night','bi':'bye','tc':'take care'}
print(wa_corpa)
print(wa_corpa.keys())
print(wa_corpa['hlo'])
del(wa_corpa['hlo'])
wa_corpa['university']='bu'
print(wa_corpa)

#Ex. 2: Conditional Statements and Looping
#1 Electricity Bill:
def house():
 unit=int(input("Enter your unit: "))
 if(unit <= 100):
    bill = unit*0.05
 elif unit >= 101 and unit <= 200:
    bill = 5 + ((unit - 100) * 0.75)
 elif unit >= 201 and unit <= 300:
    bill = 5 + 75 + ((unit - 200) * 1.20)
 else:
    bill = 5 + 75 + 120 + ((unit - 300) * 1.50)
 print("Bill per unit:",bill)
def commercial():
 unit=int(input("Enter your unit: "))
 if(unit <= 100):
    bill = unit*0.05*2
 elif unit >= 101 and unit <= 200:
    bill = 5 + ((unit - 100) * 0.75)*2
 elif unit >= 201 and unit <= 300:
    bill = 5 + 75 + ((unit - 200) * 1.20)*2
 else:
    bill = 5 + 75 + 120 + ((unit - 300) * 1.50)*2
 print("Bill per unit:",bill)
ch=0
while ch==0:
 ch=int(input("enter the choice 1 for house 2 for comercial"))
 if ch==1:
   house();
 elif ch==2:
   commercial();
 else:
   print("invalid choice")

#Ex. 3: OOPS Concepts: Functions & Inheritance  
#1 Quiz Using Functions: 
class Question:
     def __init__(self, prompt, answer):
          self.prompt = prompt
          self.answer = answer

question_prompts = [
    "Who is the father of computer security?\n a) August Kerckhoffs\n b) Bob Thomas\nc) Robert\nd) Charles \n\n",
    "Who is the father of computer security?\n a) August Kerckhoffs\n b) Bob Thomas\nc) Robert\nd) Charles \n\n",
    "Who is the father of computer security?\n a) August Kerckhoffs\n b) Bob Thomas\nc) Robert\nd) Charles \n\n",
    "Who is the father of computer security?\n a) August Kerckhoffs\n b) Bob Thomas\nc) Robert\nd) Charles \n\n",
    "Who is the father of computer security?\n a) August Kerckhoffs\n b) Bob Thomas\nc) Robert\nd) Charles \n\n",
]

questions = [
     Question(question_prompts[0], "a"),
     Question(question_prompts[1], "a"),
     Question(question_prompts[1], "a"),
     Question(question_prompts[1], "a"),
     Question(question_prompts[1], "a"),
]

def run_quiz(questions):
     score = 0
     for question in questions:
          answer = input(question.prompt)
          if answer == question.answer:
               score += 2
          else:
               score -= 1
     print("score:", score)

run_quiz(questions)

#Ex. 3:
#2 Calculate the Gross Salary and Net Salary of an employee for following allowance & deduction Using Inheritance.
class Employee:
 def getEmployee(self):
   self.salary = int(input("Enter Employees Basic Salary: "))
   return(self.salary)
class Perks(Employee):
    def calcPerks(self):
        bs=self.getEmployee()
        self.da=bs*0.20
        self.hra=bs*0.1
        self.ta=bs*0.075
        self.emi=bs*0.02
        self.pf=bs*0.12
        self.gs=bs+self.da+self.hra+self.ta
        self.ns=self.gs-self.pf-self.emi
        print("Net Salary:",self.ns)
        print("Gross Salary:",self.gs)
empSalary = Perks()
empSalary.calcPerks()

#Ex4 Data Manipulation Using Pandas
import pandas as pd
#1 Create a dataframe
df = pd.DataFrame({
'RollNo':[1,2,3,4,5,6],
'Name':['Thulasi Doss','Seetha','Ram','Kumar','Banu','vikram'],
'Father_Name':['Ayyappan','Ravi','Ganesan','Rajesh','Ashok','rohit'],
'd_o_y':[2002,2001,2002,2003,1990,2005],
'status':['Son','Daughter','Son','Daughter','Son','Son']
})
df['age']=2022-df['d_o_y']
df['Father_age']=2*df['age']
df['father_status']=df['Father_age'].apply(lambda x: 'retired' if x>58 else 'not retired')
df['gender']=df['status'].apply(lambda x: 'M' if x =='Son' else 'F')
display(df)

#2 Select columns with specific data types
columns = df.select_dtypes(include=['int'])
print(columns,'\n')

#3 Slicing the dataframe
print(df.loc[0:5,'Father_Name':'d_o_y'],'\n')

#4 Select specific values in the column
print(df.iloc[1:2, 1:2],'\n')

#5 Group by Age
print(df.groupby(['age','status']).groups)

#6 Map with dataframe 
df['MARRIDE']=df['age'].map(lambda x: 'YES' if x>22 else 'NO')
print(df['MARRIDE'])

#7 Rename the column name
df.rename(columns = {'MARRIDE':'MARRIDE_STATUS'}, inplace = True)
df

#8 Drop columns & rows in the dataframe
df.drop(df.index[1:3], inplace=True)
df.drop(['RollNo'], axis=1,inplace=True)
print(df)

#9 Write/Read as CSV file 
df.to_csv('/content/drive/MyDrive/python lab/file2.csv',index=False)
csv_df = pd.read_csv('/content/drive/MyDrive/python lab/file2.csv')
display(csv_df)

#9 Write/Read as CSV file 
df.to_csv('/content/drive/MyDrive/python lab/file2.csv',index=False)
csv_df = pd.read_csv('/content/drive/MyDrive/python lab/file2.csv')
display(csv_df)

#Ex6. Modular Programming: Scrap news from Hacker News
!pip install pygooglenews

from google.colab import files
uploaded = files.upload()

import news as n
df1=n.scrap_news("hacker news")
display(df1)

import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
wordcloud = WordCloud(background_color="white",width=1600, height=800).generate(' '.join(df1['title'].tolist()))
plt.figure( figsize=(12,10), facecolor='k')
plt.imshow(wordcloud)

!pip install scapy

#Ex7.Banner Grabbing Scapy
import socket
import requests
from scapy.all import sniff
#getting ip of domain
hostname = input("Enter the website url (full)")
ip= socket.gethostbyname(hostname)
print(hostname,"\n",ip)
#Banner grabbing
def banner(ip, port):
    s = socket.socket()
    s.connect((ip, int(port)))
    print(s.recv(1024))
port = str(input("Please enter the port: "))
banner(ip, port)
print(hostname)
#check if vulnerable
domain = "https://www."+hostname
headers= requests.get(domain).headers

if 'X-Frame-Options' in headers:
    print(domain," non - vulnerable")
else:
    print(domain, " vulnerable")

pip install pynput

from pynput.keyboard import Key, Listener
def on_press(key):
    print('{0} pressed'.format(key))
def on_release(key):
    if key == Key.esc:
        return False
# Collect events until released
with Listener(on_press=on_press,on_release=on_release) as listener:
  listener.join()